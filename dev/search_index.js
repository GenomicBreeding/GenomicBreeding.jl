var documenterSearchIndex = {"docs":
[{"location":"models/","page":"Models","title":"Models","text":"CurrentModule = GenomicBreeding","category":"page"},{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Models","category":"page"},{"location":"models/","page":"Models","title":"Models","text":"","category":"page"},{"location":"models/#Linear-mixed-models-for-analysing-trial","page":"Models","title":"Linear mixed models for analysing trial","text":"","category":"section"},{"location":"models/#Linear-models-for-genomic-prediction","page":"Models","title":"Linear models for genomic prediction","text":"","category":"section"},{"location":"models/#Non-linear-models-for-genomic-prediction","page":"Models","title":"Non-linear models for genomic prediction","text":"","category":"section"},{"location":"models/#Epifeat","page":"Models","title":"Epifeat","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GenomicBreeding","category":"page"},{"location":"#GenomicBreeding","page":"Home","title":"GenomicBreeding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GenomicBreeding.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GenomicBreeding]","category":"page"},{"location":"#GenomicBreeding.GBInput","page":"Home","title":"GenomicBreeding.GBInput","text":"mutable struct GBInput\n    fname_geno::String\n    fname_pheno::String\n    bulk_cv::Bool\n    populations::Union{Nothing, String, Vector{String}}\n    traits::Union{Nothing, String, Vector{String}}\n    models::Any\n    n_folds::Int64\n    n_replications::Int64\n    maf::Float64\n    mtv::Float64\n    n_iter::Int64,\n    n_burnin::Int64,\n    verbose::Bool\nend\n\nInput struct\n\nfname_geno: genotype file (see file format guide: TODO: {URL HERE})\nfname_pheno: phenotype file (see file format guide: TODO: {URL HERE})\nbulk_cv: perform cross-validation across all populations, i.e. disregard population grouping (Default = false)\npopulations: include only these populations (Default = nothing which means include all populations)\ntraits: include only these traits (Default = nothing which means include all traits)\nmodels: include these model functions (Default = [ridge, bayesa]; see models list: TODO: {URL HERE})\nn_folds: number of k partitions for k-fold cross-validation (Default = 5)\nn_replications: number of replications for repeated k-fold cross-validation (Default = 5)\nkeep_all: keep all entries upon merging genomes and phenomes potentially resulting in sparsities in both structs? (Default = false)\nmaf: minimum allele frequency (Default = 0.05)\nmtv: minimum trait variance (Default = 1e-7)\nn_iter: number of Bayesian model fitting MCMC/HMC iteration (Default = 1_500)\nn_burnin: number of initial Bayesian model fitting MCMC/HMC iterations to be excluded from the posterior distribution (Default = 500)\nverbose: show messages (Default = true)\n\n\n\n\n\n","category":"type"},{"location":"#GenomicBreeding.assess-Tuple{GBInput}","page":"Home","title":"GenomicBreeding.assess","text":"assess(input::GBInput)::Tuple{DataFrame,DataFrame}\n\nAssess genomic prediction accuracy via replicated k-fold cross-validation\n\nExample\n\njulia> genomes = GBCore.simulategenomes(n=300, l=1_000, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> proportion_of_variance = fill(0.0, 9, 3); proportion_of_variance[1, :] .= 1.00; # 100% variance on the additive genetic effects\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, proportion_of_variance=proportion_of_variance, verbose=false);\n\njulia> phenomes = extractphenomes(trials);\n\njulia> fname_geno = try writedelimited(genomes, fname=\"test-geno.tsv\"); catch; rm(\"test-geno.tsv\"); writedelimited(genomes, fname=\"test-geno.tsv\"); end;\n\njulia> fname_pheno = try writedelimited(phenomes, fname=\"test-pheno.tsv\"); catch; rm(\"test-pheno.tsv\"); writedelimited(phenomes, fname=\"test-pheno.tsv\"); end;\n\njulia> input = GBInput(fname_geno=fname_geno, fname_pheno=fname_pheno, populations=[\"pop_1\", \"pop_3\"], traits=[\"trait_1\"], n_replications=2, n_folds=3, verbose=false);\n\njulia> df_across, df_per_entry = assess(input);\n\njulia> df_agg = combine(groupby(df_across, :model), :cor_mean => mean);\n\njulia> df_agg.cor_mean_mean[df_agg.model .== \"ridge\"] < df_agg.cor_mean_mean[df_agg.model .== \"bayesa\"]\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreeding.extracteffects-Tuple{GBInput}","page":"Home","title":"GenomicBreeding.extracteffects","text":"extracteffects(input::GBInput)::Vector{DataFrame}\n\nExtract allele effects by fitting the models without cross-validation\n\nExample\n\njulia> genomes = GBCore.simulategenomes(n=300, l=1_000, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> proportion_of_variance = fill(0.0, 9, 3); proportion_of_variance[1, :] .= 1.00; # 100% variance on the additive genetic effects\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, proportion_of_variance=proportion_of_variance, verbose=false);\n\njulia> phenomes = extractphenomes(trials);\n\njulia> fname_geno = try writedelimited(genomes, fname=\"test-geno.tsv\"); catch; rm(\"test-geno.tsv\"); writedelimited(genomes, fname=\"test-geno.tsv\"); end;\n\njulia> fname_pheno = try writedelimited(phenomes, fname=\"test-pheno.tsv\"); catch; rm(\"test-pheno.tsv\"); writedelimited(phenomes, fname=\"test-pheno.tsv\"); end;\n\njulia> input = GBInput(fname_geno=fname_geno, fname_pheno=fname_pheno, populations=[\"pop_1\", \"pop_3\"], traits=[\"trait_1\"], n_replications=2, n_folds=3, verbose=false);\n\njulia> effects = extracteffects(input);\n\njulia> sum([nrow(effects[i]) == nrow(effects[1]) for i in eachindex(effects)]) == length(effects)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#GenomicBreeding.load-Tuple{GBInput}","page":"Home","title":"GenomicBreeding.load","text":"load(input::GBInput)::Tuple{Genomes, Phenomes}\n\nLoad, merge and filter genotype and phenotype data\n\nExample\n\njulia> genomes = GBCore.simulategenomes(n=300, verbose=false); genomes.populations = StatsBase.sample(string.(\"pop_\", 1:3), length(genomes.entries), replace=true);\n\njulia> trials, _ = GBCore.simulatetrials(genomes=genomes, n_years=1, n_seasons=1, n_harvests=1, n_sites=1, n_replications=1, verbose=false);\n\njulia> phenomes = extractphenomes(trials);\n\njulia> fname_geno = try writedelimited(genomes, fname=\"test-geno.tsv\"); catch; rm(\"test-geno.tsv\"); writedelimited(genomes, fname=\"test-geno.tsv\"); end;\n    \njulia> fname_pheno = try writedelimited(phenomes, fname=\"test-pheno.tsv\"); catch; rm(\"test-pheno.tsv\"); writedelimited(phenomes, fname=\"test-pheno.tsv\"); end;\n\njulia> input = GBInput(fname_geno=fname_geno, fname_pheno=fname_pheno, populations=[\"pop_1\", \"pop_3\"], traits=[\"trait_1\"], verbose=false);\n\njulia> genomes, phenomes = load(input);\n\njulia> length(unique(genomes.populations)) == length(unique(phenomes.populations)) == 2\ntrue\n\njulia> length(phenomes.traits) == 1\ntrue\n\njulia> rm.([fname_geno, fname_pheno]);\n\n\n\n\n\n","category":"method"},{"location":"simulations/","page":"Simulation","title":"Simulation","text":"CurrentModule = GenomicBreeding","category":"page"},{"location":"simulations/#Simulation","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"simulations/","page":"Simulation","title":"Simulation","text":"Simulations","category":"page"},{"location":"simulations/","page":"Simulation","title":"Simulation","text":"","category":"page"},{"location":"simulations/#Simulate-genomes","page":"Simulation","title":"Simulate genomes","text":"","category":"section"},{"location":"simulations/#Simulate-effects","page":"Simulation","title":"Simulate effects","text":"","category":"section"},{"location":"simulations/#Simulate-trials","page":"Simulation","title":"Simulate trials","text":"","category":"section"}]
}
